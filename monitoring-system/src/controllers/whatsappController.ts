import { Response } from 'express';
import { AuthRequest } from '../middlewares/authMiddleware';
import { WhatsAppAccountModel } from '../models/WhatsAppAccount';
import { sendVerificationCode, generateUserQR } from '../whatsapp/whatsappClient';
import { DockerService } from '../services/dockerService';
import mongoose from 'mongoose';
import { UserModel } from '../models/User';
import { io } from '../server';


const dockerService = DockerService.getInstance();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
const handleError = (res: Response, error: unknown, message: string, statusCode: number = 500) => {
  console.error(message, error);
  res.status(statusCode).json({ 
    success: false,
    message: message,
    qrCode: null
  });
};
// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp
const sendWhatsAppCode = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    const user = await UserModel.findById(userId);
    if (!user) {
      res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ WhatsApp
    const success = await sendVerificationCode(user.phoneNumber);
    if (!success) {
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥' });
      return;
    }

    res.json({ message: '–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üìå 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ WhatsApp
const createWhatsAppAccount = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { companyName, avgResponseTime, secondTouch } = req.body;
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingAccount = await WhatsAppAccountModel.findOne({ userId });
    if (existingAccount) {
      res.status(400).json({ message: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å WhatsApp –∞–∫–∫–∞—É–Ω—Ç' });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    const account = await WhatsAppAccountModel.create({
      userId,
      companyName,
      avgResponseTime,
      secondTouch
    });

    // –°–æ–∑–¥–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è WhatsApp —Å–µ—Å—Å–∏–∏
    const containerName = await dockerService.createWhatsAppContainer(account.id);

    res.status(201).json({ 
      message: 'WhatsApp –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 
      account: {
        id: account.id,
        companyName: account.companyName,
        avgResponseTime: account.avgResponseTime,
        secondTouch: account.secondTouch
      }
    });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WhatsApp –∞–∫–∫–∞—É–Ω—Ç–∞');
  }
};

// üìå 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
const getContainerStatus = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { accountId } = req.params;
    const status = await dockerService.getContainerStatus(accountId);
    res.json({ status });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
  }
};

// üìå 4. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
const stopContainer = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { accountId } = req.params;
    await dockerService.stopWhatsAppContainer(accountId);
    res.json({ message: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ WhatsApp –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getWhatsAppAccounts = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    const accounts = await WhatsAppAccountModel.find({ userId });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const accountsWithStatus = await Promise.all(
      accounts.map(async (account) => {
        const status = await dockerService.getContainerStatus(account.id);
        return {
          ...account.toObject(),
          containerStatus: status
        };
      })
    );

    res.json({ accounts: accountsWithStatus });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ WhatsApp –∞–∫–∫–∞—É–Ω—Ç–∞
const deleteWhatsAppAccount = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { accountId } = req.params;
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    await dockerService.stopWhatsAppContainer(accountId);

    const account = await WhatsAppAccountModel.findOneAndDelete({ 
      _id: accountId,
      userId 
    });

    if (!account) {
      res.status(404).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    res.json({ message: '–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserQR = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    console.log('[QR-DEBUG] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞');
    
    const userId = req.user?.id;
    if (!userId) {
      console.log('[QR-DEBUG] –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      res.status(401).json({ 
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
      return;
    }

    console.log('[QR-DEBUG] –ó–∞–ø—Ä–æ—Å QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    res.setHeader('Cache-Control', 'no-store');
    res.setHeader('Pragma', 'no-cache');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('[QR-DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞');
    const qrCode = await generateUserQR(userId, io);
    console.log('[QR-DEBUG] QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({ 
      success: true,
      qrCode: qrCode,
      message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –Ω–∞—á–∞—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket.'
    });
    console.log('[QR-DEBUG] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É');

  } catch (error) {
    console.error('[QR-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
const handleQRScanned = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserModel.findByIdAndUpdate(userId, { whatsappAuthorized: true });
    res.json({ message: 'QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω' });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞');
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞
const getQRCodeStatus = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp
    const user = await UserModel.findById(userId);
    if (!user) {
      res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    res.json({ 
      status: user.whatsappAuthorized ? 'authorized' : 'pending',
      whatsappAuthorized: user.whatsappAuthorized
    });
  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
const sendStatusUpdate = async (userId: string, res: Response) => {
  try {
    const user = await UserModel.findById(userId);
    if (!user) {
      return false;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    res.write(`data: ${JSON.stringify({
      success: true,
      qrScanned: user.whatsappAuthorized,
      message: user.whatsappAuthorized ? 'QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω' : 'QR-–∫–æ–¥ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω'
    })}\n\n`);
    
    return user.whatsappAuthorized;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞
const checkQRStatus = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(async () => {
      const isScanned = await sendStatusUpdate(userId, res);
      if (isScanned) {
        clearInterval(interval);
        res.end();
      }
    }, 5000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    req.on('close', () => {
      clearInterval(interval);
    });

  } catch (error) {
    handleError(res, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ QR-–∫–æ–¥–∞');
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
export {
  sendWhatsAppCode,
  createWhatsAppAccount,
  getContainerStatus,
  stopContainer,
  getWhatsAppAccounts,
  deleteWhatsAppAccount,
  getUserQR,
  handleQRScanned,
  getQRCodeStatus,
  checkQRStatus
};